name: Reusable RDS Cluster Management

on:
  workflow_call:
    inputs:
      aws-region:
        required: true
        type: string
        description: 'AWS region where the RDS clusters are located'
      role-arn:
        required: true
        type: string
        description: 'ARN of the IAM role to assume for AWS operations'
      action:
        required: false
        type: string
        description: 'Action to perform (start or stop). If not provided, will be determined based on schedule.'
      cluster:
        required: false
        type: string
        description: 'RDS cluster identifier. If not provided, will use a predefined list for scheduled actions.'
      cron-start:
        required: false
        type: string
        default: '0 12 * * 1-5'
        description: 'Cron expression for start action'
      cron-stop:
        required: false
        type: string
        default: '0 0 * * 2-6'
        description: 'Cron expression for stop action'
      scheduled-clusters:
        required: false
        type: string
        description: 'JSON array of clusters to manage on schedule'
    outputs:
      should_run:
        description: 'Whether the cluster management should run'
        value: ${{ jobs.prepare-inputs.outputs.should_run }}
      action:
        description: 'The action performed (start or stop)'
        value: ${{ jobs.prepare-inputs.outputs.action }}
      cluster_list:
        description: 'The clusters the action operated on'
        value: ${{ jobs.prepare-inputs.outputs.cluster_list }}

permissions:
  id-token: write
  contents: read

jobs:
  prepare-inputs:
    runs-on: self-hosted
    outputs:
      action: ${{ steps.set-action.outputs.action }}
      cluster_list: ${{ steps.set-cluster-list.outputs.cluster_list }}
      should_run: ${{ steps.check-cluster-list.outputs.should_run }}
    steps:
      - name: Set action
        id: set-action
        run: |
          if [ -n "${{ inputs.action }}" ]; then
            echo "action=${{ inputs.action }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" == "schedule" ]; then
            if [ "${{ github.event.schedule }}" == "${{ inputs.cron-start }}" ]; then
              echo "action=start" >> $GITHUB_OUTPUT
            else
              echo "action=stop" >> $GITHUB_OUTPUT
            fi
          else
            echo "Error: Action not specified and not a scheduled event"
            exit 1
          fi

      - name: Set cluster list
        id: set-cluster-list
        run: |
          if [ -n "${{ inputs.cluster }}" ]; then
            echo "cluster_list=${{ inputs.cluster }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" == "schedule" ]; then
            echo "cluster_list=$(echo '${{ inputs.scheduled-clusters }}' | jq -r 'join(",")')" >> $GITHUB_OUTPUT
          else
            echo "Error: Cluster not specified and not a scheduled event"
            exit 1
          fi

      - name: Check if cluster list is empty
        id: check-cluster-list
        run: |
          CLUSTER_LIST="${{ steps.set-cluster-list.outputs.cluster_list }}"
          if [ -z "$CLUSTER_LIST" ]; then
            echo "should_run=false" >> $GITHUB_OUTPUT
            echo "Cluster list is empty. Skipping job execution."
          else
            echo "should_run=true" >> $GITHUB_OUTPUT
            echo "Cluster list is not empty. Proceeding with job execution."
          fi

  manage-clusters:
    needs: prepare-inputs
    if: needs.prepare-inputs.outputs.should_run == 'true'
    uses: LearnWithHomer/infrastructure-public/.github/workflows/aws-cli.yml@main
    with:
      aws-region: ${{ inputs.aws-region }}
      role-arn: ${{ inputs.role-arn }}
      cli-commands: |
        set -euo pipefail

        ACTION="${{ needs.prepare-inputs.outputs.action }}"
        CLUSTER_LIST="${{ needs.prepare-inputs.outputs.cluster_list }}"

        echo "Action: $ACTION"
        echo "Targets: $CLUSTER_LIST"

        ensure_target_type() {
          local id="$1"
          if aws rds describe-db-clusters --db-cluster-identifier "$id" >/dev/null 2>&1; then
            echo "type=cluster"
            return 0
          fi
          if aws rds describe-db-instances --db-instance-identifier "$id" >/dev/null 2>&1; then
            echo "type=instance"
            return 0
          fi
          echo "type=unknown"
          return 1
        }

        start_cluster() {
          local id="$1"
          set +e
          out=$(aws rds start-db-cluster --db-cluster-identifier "$id" 2>&1)
          rc=$?
          set -e
          echo "$out"
          if [ $rc -eq 0 ]; then
            echo "Started cluster $id"
            return 0
          fi
          if echo "$out" | grep -q "InvalidDBClusterState"; then
            echo "Cluster $id already running or not startable."
            return 0
          fi
          echo "ERROR starting cluster $id"
          return $rc
        }

        stop_cluster() {
          local id="$1"
          set +e
          out=$(aws rds stop-db-cluster --db-cluster-identifier "$id" 2>&1)
          rc=$?
          set -e
          echo "$out"
          if [ $rc -eq 0 ]; then
            echo "Stopped cluster $id"
            return 0
          fi
          if echo "$out" | grep -q "InvalidDBClusterState"; then
            echo "Cluster $id already stopped or not stoppable."
            return 0
          fi
          echo "ERROR stopping cluster $id"
          return $rc
        }

        start_instance() {
          local id="$1"
          set +e
          out=$(aws rds start-db-instance --db-instance-identifier "$id" 2>&1)
          rc=$?
          set -e
          echo "$out"
          if [ $rc -eq 0 ]; then
            echo "Started instance $id"
            return 0
          fi
          if echo "$out" | grep -q "InvalidDBInstanceState"; then
            echo "Instance $id already running or not startable."
            return 0
          fi
          echo "ERROR starting instance $id"
          return $rc
        }

        stop_instance() {
          local id="$1"
          set +e
          out=$(aws rds stop-db-instance --db-instance-identifier "$id" 2>&1)
          rc=$?
          set -e
          echo "$out"
          if [ $rc -eq 0 ]; then
            echo "Stopped instance $id"
            return 0
          fi
          if echo "$out" | grep -q "InvalidDBInstanceState"; then
            echo "Instance $id already stopped or not stoppable."
            return 0
          fi
          echo "ERROR stopping instance $id"
          return $rc
        }

        IFS=',' read -ra TARGETS <<< "$CLUSTER_LIST"
        for id in "${TARGETS[@]}"; do
          id="${id//[[:space:]]/}"
          if [ -z "$id" ]; then continue; fi
          echo "Processing $id ..."
          type_str=$(ensure_target_type "$id" || true)
          case "$type_str" in
            type=cluster)
              if [ "$ACTION" = "start" ]; then start_cluster "$id"; else stop_cluster "$id"; fi
              ;;
            type=instance)
              if [ "$ACTION" = "start" ]; then start_instance "$id"; else stop_instance "$id"; fi
              ;;
            *)
              echo "ERROR: $id is neither a DB cluster nor a DB instance identifier"
              exit 1
              ;;
          esac
        done