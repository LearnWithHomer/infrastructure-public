name: Kops K8s Cluster Scheduled Upgrade with Kops

on:
  workflow_call:
    inputs:
      aws_account_id:
        required: true
        type: string
      role_name:
        required: true
        type: string
      aws_region:
        required: false
        type: string
        default: "us-east-1"
      cluster_name:
        required: true
        type: string
      cluster_domain:
        required: true
        type: string
      kops_state_bucket:
        required: true
        type: string
      kops_discovery_store:
        required: true
        type: string
      vpc_id:
        required: true
        type: string
      vpc_cidr:
        required: false
        type: string
        default: "172.200.0.0/16"
    outputs:
      upgrade_status:
        description: 'The status of the Kubernetes upgrade check'
        value: ${{ jobs.check-upgrade-k8s.outputs.upgrade_status }}
      old_version:
        description: 'The current Kubernetes version before upgrade'
        value: ${{ jobs.check-upgrade-k8s.outputs.old_version }}
      new_version:
        description: 'The new Kubernetes version after upgrade, if performed'
        value: ${{ jobs.check-upgrade-k8s.outputs.new_version }}
    secrets:
      SSL_CERT_ARN:
        required: true
      SSL_CERT_ARN_INTERNAL:
        required: false
      ENCODED_KUBECONFIG:
        required: true

jobs:
  check-upgrade-k8s:
    uses: LearnWithHomer/infrastructure-public/.github/workflows/kops-cli.yml@workflows/kops
    with:
      aws_account_id: ${{ inputs.aws_account_id }}
      role_name: ${{ inputs.role_name }}
      aws_region: ${{ inputs.aws_region }}
      cluster_name: ${{ inputs.cluster_name }}
      cluster_domain: ${{ inputs.cluster_domain }}
      kops_state_bucket: ${{ inputs.kops_state_bucket }}
      kops_discovery_store: ${{ inputs.kops_discovery_store }}
      vpc_id: ${{ inputs.vpc_id }}
      vpc_cidr: ${{ inputs.vpc_cidr }}
      kops-commands: |
        # Check for Kubernetes upgrade
        upgrade_output=$(kops upgrade cluster)
        
        old_version=$(echo "$upgrade_output" | awk '/KubernetesVersion/ {print $3}')
        new_version=$(echo "$upgrade_output" | awk '/KubernetesVersion/ {print $4}')
        
        echo "${old_version}" > old_version.txt
        echo "${new_version}" > new_version.txt
        
        if [[ "${new_version}" > "${old_version}" ]]; then
          echo "Upgrade available" > upgrade_status.txt
          
          echo "Upgrading cluster from ${old_version} to ${new_version}"
          # kops upgrade cluster --yes
          
          echo "Performing rolling update"
          # kops rolling-update cluster --yes
        else
          echo "Up to date" > upgrade_status.txt
          echo "Cluster ${{ inputs.cluster_name }} is already on the latest version ${old_version}"
        fi
    secrets:
      SSL_CERT_ARN: ${{ secrets.SSL_CERT_ARN }}
      SSL_CERT_ARN_INTERNAL: ${{ secrets.SSL_CERT_ARN_INTERNAL }}
      ENCODED_KUBECONFIG: ${{ secrets.ENCODED_KUBECONFIG }}