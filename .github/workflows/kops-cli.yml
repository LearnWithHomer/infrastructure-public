name: Reusable Kops CLI

on:
  workflow_call:
    inputs:
      aws_account_id:
        required: true
        type: string
      role_name:
        required: true
        type: string
      aws_region:
        required: false
        type: string
        default: "us-east-1"
      kubectl_version:
        required: false
        type: string
        default: 'v1.29.3'
        description: 'Kubectl version to install'
      kops-commands:
        required: true
        type: string
      cluster_name:
        required: true
        type: string
      cluster_domain:
        required: true
        type: string
        description: "e.g. kops.learnwithhomer.com"
      kops_state_bucket:
        required: true
        type: string
      kops_discovery_store:
        required: true
        type: string
      vpc_id:
        required: true
        type: string
      vpc_cidr:
        required: false
        type: string
        default: "172.200.0.0/16"
    outputs:
      upgrade_status:
        description: 'The status of the Kubernetes upgrade check'
        value: ${{ jobs.run-aws-cli.outputs.upgrade_status }}
      old_version:
        description: 'The current Kubernetes version before upgrade'
        value: ${{ jobs.run-aws-cli.outputs.old_version }}
      new_version:
        description: 'The new Kubernetes version after upgrade, if performed'
        value: ${{ jobs.run-aws-cli.outputs.new_version }}
    secrets:
      SSL_CERT_ARN:
        required: true
      SSL_CERT_ARN_INTERNAL:
        required: false
      ENCODED_KUBECONFIG:
        required: true

jobs:
  run-aws-cli:
    runs-on: self-hosted
    outputs:
      upgrade_status: ${{ steps.kops-exec.outputs.upgrade_status }}
      old_version: ${{ steps.kops-exec.outputs.old_version }}
      new_version: ${{ steps.kops-exec.outputs.new_version }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ inputs.aws_account_id }}:role/${{ inputs.role_name }}
          aws-region: ${{ inputs.aws_region }}

      - name: Execute Kops CLI commands
        id: kops-exec
        run: |
          # Export environment variables
          export CLUSTER_NAME=${{ inputs.cluster_name }}
          export CLUSTER_DOMAIN=${{ inputs.cluster_domain }}
          export CLUSTER_FULL_NAME="${{ inputs.cluster_name }}.${{ inputs.cluster_domain }}"
          export KOPS_CLUSTER_NAME="${{ inputs.cluster_name }}.${{ inputs.cluster_domain }}"
          export KOPS_STATE_BUCKET="${{ inputs.kops_state_bucket }}"
          export KOPS_DISCOVERY_STORE="s3://${{ inputs.kops_discovery_store }}"
          export KOPS_STATE_STORE="s3://${{ inputs.kops_state_bucket }}/${{ inputs.cluster_name }}.${{ inputs.cluster_domain }}/"
          export VPC_ID=${{ inputs.vpc_id }}
          export VPC_CIDR=${{ inputs.vpc_cidr }}

          # Install kubectl
          curl -LO "https://dl.k8s.io/release/${{ inputs.kubectl_version }}/bin/linux/amd64/kubectl"
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

          # Setup KUBECONFIG
          echo "$ENCODED_KUBECONFIG" | base64 -d > kubeconfig.yaml
          chmod 600 kubeconfig.yaml
          export KUBECONFIG=./kubeconfig.yaml

          # Setup Kops
          curl -Lo kops https://github.com/kubernetes/kops/releases/download/$(curl -s https://api.github.com/repos/kubernetes/kops/releases/latest | grep tag_name | cut -d '"' -f 4)/kops-linux-amd64
          chmod +x kops
          sudo mv kops /usr/local/bin/kops

          # Install yq
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
          sudo chmod +x /usr/bin/yq

          # Run Kops Commands
          ${{ inputs.kops-commands }}

          # Output the results
          echo "upgrade_status=$(cat upgrade_status.txt)" >> $GITHUB_OUTPUT
          echo "old_version=$(cat old_version.txt)" >> $GITHUB_OUTPUT
          echo "new_version=$(cat new_version.txt)" >> $GITHUB_OUTPUT